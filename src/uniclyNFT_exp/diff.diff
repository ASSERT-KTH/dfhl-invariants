diff --git a/src/uniclyNFT_exp/PointFarm.sol b/src/uniclyNFT_exp/PointFarm_patch.sol
index 9100f6a..1e35bd3 100644
--- a/src/uniclyNFT_exp/PointFarm.sol
+++ b/src/uniclyNFT_exp/PointFarm_patch.sol
@@ -934,6 +934,8 @@ contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
         _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
     }
 
+
+
     /**
      * @dev See {IERC1155MetadataURI-uri}.
      *
@@ -1413,15 +1415,23 @@ abstract contract Ownable is Context {
 pragma solidity 0.6.12;
 
 
+// Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol
+// Modified by 0xLeia
 
 
+/** PATCH
+1. Reentrancy Guard (__lock_modifier0) in `deposit()` and `withdraw()`
+Prevents reentrant entry into deposit() or withdraw() from any internal callback 
+(e.g. _mint() triggers a reentrant withdraw()).
 
+2. require(_amount > 0 || user.amount > 0)
+Prevents 0-token deposits from contracts with no prior stake.
+which were previously exploitable to trigger reward minting without real deposits
 
+better:follow Check-Effects-Interactions pattern
+ */
 
-// Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol
-// Modified by 0xLeia
-
-contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
+contract PointFarm_patch is ERC1155Burnable, ERC1155Receiver, Ownable {
     using SafeMath for uint256;
     using SafeERC20 for IERC20;
 
@@ -1490,6 +1500,16 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
         startBlock = _startBlock;
     }
 
+    bool private __lock_modifier0_lock;
+
+    modifier __lock_modifier0() {
+        require(!__lock_modifier0_lock, "ReentrancyGuard: function is already executing");
+        __lock_modifier0_lock = true;
+        _;
+        __lock_modifier0_lock = false;
+}
+
+
     function setURI(string memory newuri) public onlyOwner {
         _setURI(newuri);
         emit URI(newuri);
@@ -1577,7 +1597,12 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
     }
 
     // Deposit uTokens to PointFarm to farm points.
-    function deposit(uint256 _pid, uint256 _amount) public {
+    function deposit(uint256 _pid, uint256 _amount) public __lock_modifier0 {
+        /**
+        prevents attackers from depositing 0 tokens
+         */
+        require(_amount > 0 || userInfo[_pid][msg.sender].amount > 0, "Invalid deposit: zero amount and no existing stake");
+       
         PoolInfo storage pool = poolInfo[_pid];
         UserInfo storage user = userInfo[_pid][msg.sender];
         updatePool(_pid);
@@ -1597,7 +1622,7 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
     }
 
     // Withdraw uTokens from PointFarm.
-    function withdraw(uint256 _pid, uint256 _amount) public {
+    function withdraw(uint256 _pid, uint256 _amount) public __lock_modifier0{
         PoolInfo storage pool = poolInfo[_pid];
         UserInfo storage user = userInfo[_pid][msg.sender];
         require(user.amount >= _amount, "withdraw: not good");
