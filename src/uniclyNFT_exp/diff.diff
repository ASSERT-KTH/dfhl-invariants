diff --git a/src/uniclyNFT_exp/PointFarm.sol b/src/uniclyNFT_exp/PointFarm_patch.sol
index 2718239..960fa66 100644
--- a/src/uniclyNFT_exp/PointFarm.sol
+++ b/src/uniclyNFT_exp/PointFarm_patch.sol
@@ -1403,7 +1403,19 @@ pragma solidity 0.6.12;
 // Copied from https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol
 // Modified by 0xLeia
 
-contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
+/**
+ * PATCH
+ * 1. Reentrancy Guard (__lock_modifier0) in `deposit()` and `withdraw()`
+ * Prevents reentrant entry into deposit() or withdraw() from any internal callback 
+ * (e.g. _mint() triggers a reentrant withdraw()).
+ *
+ * 2. require(_amount > 0 || user.amount > 0)
+ * Prevents 0-token deposits from contracts with no prior stake.
+ * which were previously exploitable to trigger reward minting without real deposits
+ *
+ * better:follow Check-Effects-Interactions pattern
+ */
+contract PointFarm_patch is ERC1155Burnable, ERC1155Receiver, Ownable {
     using SafeMath for uint256;
     using SafeERC20 for IERC20;
 
@@ -1465,6 +1477,15 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
         startBlock = _startBlock;
     }
 
+    bool private __lock_modifier0_lock;
+
+    modifier __lock_modifier0() {
+        require(!__lock_modifier0_lock, "ReentrancyGuard: function is already executing");
+        __lock_modifier0_lock = true;
+        _;
+        __lock_modifier0_lock = false;
+    }
+
     function setURI(
         string memory newuri
     ) public onlyOwner {
@@ -1564,7 +1585,7 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
     }
 
     // Deposit uTokens to PointFarm to farm points.
-    function deposit(uint256 _pid, uint256 _amount) public {
+    function deposit(uint256 _pid, uint256 _amount) public __lock_modifier0 {
         PoolInfo storage pool = poolInfo[_pid];
         UserInfo storage user = userInfo[_pid][msg.sender];
         updatePool(_pid);
@@ -1584,7 +1605,7 @@ contract PointFarm is ERC1155Burnable, ERC1155Receiver, Ownable {
     }
 
     // Withdraw uTokens from PointFarm.
-    function withdraw(uint256 _pid, uint256 _amount) public {
+    function withdraw(uint256 _pid, uint256 _amount) public __lock_modifier0 {
         PoolInfo storage pool = poolInfo[_pid];
         UserInfo storage user = userInfo[_pid][msg.sender];
         require(user.amount >= _amount, "withdraw: not good");
